
/*
import {Monster} from "./monster.js"
import {Weapon} from "./weapon.js"




export class RoomOut {
  monster: number;
  sword: number; 
  isGoal: boolean; 
  
  constructor(monsterhp:number, weaponhp:number, goal:boolean){
    this.monster = monsterhp;
    this.sword = weaponhp;
		this.isGoal = goal;
  }

  getMonster(){return this.monster;}
  getSword(){return this.sword;}
  getIsGoal(){return this.isGoal;}
}

@monster
@sword
export class Room {
  monster: Monster
  weapon: Weapon
  goal: boolean
  constructor(goal: boolean=false) {
    this.goal = goal
    if (Math.floor(Math.random()) * 101 > 70){
    this.monster = new Monster(0)
    this.monster.generate_monster()
    }
    else {
      this.monster = new Monster(0)
    }
    if (Math.floor(Math.random()) * 101 > 60){
    this.weapon = new Weapon(0)
    this.weapon.generate_weapon()
    }
    else {
      this.weapon = new Weapon(0)
    }
    
  }
  
  getRoom() {
    let room = new RoomOut(this.monster.hp, this.weapon.atk, this.goal)
    return room
  }

}


export class Entity {
  entity_exists : boolean
  constructor(exist: boolean){
    this.entity_exists = exist;
  }
}

import {Entity} from "./entity.js"

// Library erstmal hierhin

var m_array = [...Array(1+20).keys()].slice(8)

export class Monster extends Entity{
  name: string;
  hp : number;
	m_array;
  constructor(hp: number){
    super(true);
    this.name = null;
    this.hp = hp
		this.m_array = m_array
  }


  get_name(){
    return(this.name);
  }
  del(){
    super.entity_exists = false
  }

  get_attributes(){
    return(this.hp);
  }

  generate_monster() {
    this.hp = (m_array[Math.floor(Math.random() * m_array.length)])
    return (this.hp)
  }
}



import {Entity} from "./entity.js"

var w_array = [...Array(1+15).keys()].slice(5)

export class Weapon extends Entity{
  atk: number;
  w_array;
  constructor(atk: number){
    super(true)
    this.w_array = w_array
    this.atk = 0
  }


  del(){
    super.entity_exists = false;

  }

  get_attributes(){
    return(this.atk);
  }
  generate_weapon() {
    this.atk = (this.w_array[Math.floor(Math.random() * this.w_array.length)])
    return (this.atk)
  }
}

*/